<?php /** @noinspection ForgottenDebugOutputInspection */
/** @noinspection ReturnTypeCanBeDeclaredInspection */

/** @noinspection DuplicatedCode */

namespace eftec\CliOne;

use PHPUnit\Framework\TestCase;

class CliOneTest extends TestCase
{

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, "input"];  // we use this line to simulate the user input
        //, the first value is the current value to read
        //, and the next values are the emulated user input
    }
    public function testBread() {
        $t = new CliOne('CliOneTest.php');
        $t->showLine('---bread---');
        $t->showBread();
        $t->upLevel('level1',' (type)');
        $t->showBread();
        $t->downLevel();
        $t->showBread();
        $t->downLevel(3);
        $t->showBread();
        $t->showLine('---bread---');


        $this->assertTrue(true);
    }
    public function testHistory() {
        global $argv;
        unset($GLOBALS['PHPUNIT_FAKE_READLINE']);
        $argv = ['program.php', '-dosave','xxxx']; // this value must be ignored
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'bbb','yes'];
        $t = new CliOne('CliOneTest.php');
        $t->createParam('aaa','none')->setInput()->setAddHistory()->evalParam();
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'ccc','yes'];
        $t->createParam('aaa','none')->setInput()->setAddHistory()->evalParam();
        if(PHP_MAJOR_VERSION<=7 && PHP_MINOR_VERSION<3) {
            $this->assertEquals([], $t->listHistory());
        } else {
            $this->assertEquals(['bbb', 'ccc'], $t->listHistory());
            $t->clearHistory();
            $this->assertEquals([], $t->listHistory());
            $t->setHistory(['bbb', 'ccc']);
            $this->assertEquals(['bbb', 'ccc'], $t->listHistory());

            $t->createParam('aaa4','none')->setInput()->setHistory(['a','b','c'])->setAddHistory()->evalParam();
            $this->assertEquals(['a','b','c'], $t->getParameter('aaa4')->getHistory());
            $t->setHistory(['bbb', 'ccc']);
            $this->assertEquals(['bbb', 'ccc'], $t->listHistory());

        }

    }
    public function testMisc() {
        $t = new CliOne('CliOneTest.php');
        $this->assertGreaterThan(20,$t->getColSize());
        $this->assertNotEmpty(CliOne::VERSION);
        $this->assertStringContainsString('vendor',CliOne::findVendorPath());
    }
    public function testArgNone()
    {
        global $argv;
        unset($GLOBALS['PHPUNIT_FAKE_READLINE']);
        $argv = ['program.php', '-dosave','xxxx']; // this value must be ignored
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'bbb','yes'];
        $t = new CliOne('CliOneTest.php');
        $this->assertEquals('yes'
            ,$t->createParam('dosave','none')
            ->setRequired(false)
            ->setDefault('false')
            ->setInput(true,'optionshort',['yes','no'])
            ->setDescription('','Do you want to save?')
            ->evalParam(true,true));
    }
    public function testFile()
    {
        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1')->add();
        $t->createParam('test2')->add();
        $t->getParameter('test1')->value = 'hello';
        $this->assertEquals('', $t->saveData('file1', $t->getArrayParams()));
        $t->getParameter('test1')->value = 'xxxxxxx';
        $rd = $t->readData('file2');
        $this->assertEquals([false, 'Unable to read file file2.php'], $rd);
        $rd = $t->readData('file1');
        $this->assertEquals([true, ['test1' => 'hello', 'test2' => null]], $rd);
        $t->setArrayParam($rd[1]);
        $this->assertEquals('hello', $t->getParameter('test1')->value);
    }

    public function testEvalAlias()
    {
        global $argv;
        unset($GLOBALS['PHPUNIT_FAKE_READLINE']);
        $argv = ['program.php', '--test1', 'hello', '-test2', '"hello world"'];
        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1', 'flag', ['test1'])->add();
        $this->assertEquals('hello', $t->evalParam('test1')->value);
    }

    public function testEvalParam()
    {
        global $argv;
        unset($GLOBALS['PHPUNIT_FAKE_READLINE']);
        $argv = ['program.php', 'testopxxx','testop2', '-test1', 'hello', '-test2', '"hello world"', '--test3', '"hello world"','testop3'];
        $t = new CliOne('CliOneTest.php');
        $t->createParam('testop', 'first')->setRequired(false)->setAllowEmpty()->add();
        $t->createParam('testop2', 'second')->setRequired(false)->setAllowEmpty()->add();
        $t->createParam('testop3', 'last')->setRequired(false)->setAllowEmpty()->add();
        $t->createParam('test1')->add();
        $t->createParam('test2')->add();
        $t->createParam('test3', 'longflag')->add();
        $this->assertEquals('testopxxx', $t->evalParam('testop')->value);
        $this->assertEquals('testop2', $t->evalParam('testop2')->value);
        $this->assertEquals('testop3', $t->evalParam('testop3')->value);
        $this->assertEquals('hello', $t->evalParam('test1')->value);
        $this->assertEquals('hello world', $t->evalParam('test2')->value);
        $this->assertEquals('hello world', $t->evalParam('test3')->value);
        // test 2.
        $argv = ['program.php', '-test1', 'hello', '-test2', 'world'];
        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1')->add();
        $t->createParam('test2')->add();
        $p = $t->evalParam('test1');
        $this->assertEquals('hello', $p->value);
        // test 3
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1')->setDefault('not found')->add();
        $p = $t->evalParam('test1');
        $this->assertEquals('not found', $p->value);
        // test 3b
        $argv = ['program.php',];
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];
        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1b')->setDescription('', 'desc:')->setInput()->setDefault('not found')->setAllowEmpty()->add();
        $p = $t->evalParam('test1b', true);
        $this->assertEquals('not found', $p->value);
        unset($GLOBALS['PHPUNIT_FAKE_READLINE']);
        // test 4
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1')->setRequired()->add();
        $p = $t->evalParam('test1');
        $this->assertEquals(false, $p->value);
        // test 5
        $argv = ['program.php','-test1','apple'];
        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1')->setRequired()->add();
        $t->setParam('test1', 'hello world');
        $p = $t->evalParam('test1');
        $this->assertEquals('apple', $p->value);
        // test 5
        $argv = ['program.php'];
        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1')->setRequired()->add();
        $t->setParam('test1', 'hello world2');
        $p = $t->evalParam('test1');
        $this->assertEquals('hello world2', $p->value);
    }

    public function testInput()
    {
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'hello world'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')->setInput()->add();
        $p = $t->evalParam('test1');
        $this->assertEquals('hello world', $p->value);
    }

    public function testInputDefault()
    {
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'hello world'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')->setInput()->add();
        $this->assertEquals('hello world', $t->evalParam('test1', true)->value);
        $t->getParameter('test1')->setDefault($t->getParameter('test1')->value);
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, '', 'xxxx'];         // we use this line to simulate the user input
        $this->assertEquals('hello world', $t->evalParam('test1', true)->value);
        $t->getParameter('test1')->setCurrentAsDefault();
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, '', 'xxxx'];         // we use this line to simulate the user input
        $this->assertEquals('hello world', $t->evalParam('test1', true)->value);

        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, '', 'xxxx'];         // we use this line to simulate the user input
        $t->createParam('test10')->add();
        $t->setParam('test10','1234');
        $t->getParameter('test10')->missing=true;
        $this->assertEquals('1234', $t->getParameter('test10')
            ->setCurrentAsDefault()
            ->setDefault('defaultvalue')
            ->evalParam(true)->value);
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, '', 'xxxx'];         // we use this line to simulate the user input
        $t->createParam('test11')->add();
        $t->getParameter('test11')->missing=true;
        $this->assertEquals('defaultvalue', $t->setParam('test11','setvalue')
            ->setDefault('defaultvalue')
            ->setCurrentAsDefault(false)
            ->evalParam(true)
            ->value);
    }
    public function testcurrentAsDefault() {
        global $argv;
        $argv = ['program.php',];
        $cli = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];
        $cli->createParam('param1','onlyinput')
            ->setDescription('This field is called param1 and it is required')
            ->setInput()
            ->setRequired()
            ->setCurrentAsDefault()
            ->setDefault('IT MUST NOT BE VISIBLE')
            ->add();
        $cli->setParam('param1','IT MUST BE VISIBLE');
        $param1 = $cli->evalParam('param1',true);
        $this->assertEquals('IT MUST BE VISIBLE', $param1->value);

        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];
        $cli->createParam('param2','onlyinput')
            ->setDescription('This field is called param1 and it is required')
            ->setInput()
            ->setRequired()
            ->setCurrentAsDefault()
            ->setDefault('IT MUST BE VISIBLE2')
            ->add();
        var_dump($cli->getParameter('param2')->value);
        //$cli->setParam('param2','IT MUST BE VISIBLE');
        $param2 = $cli->evalParam('param2',true);

        $this->assertEquals('IT MUST BE VISIBLE2', $param2->value);
    }
    public function testValid() {
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $t->setSilentError(true);
        $this->assertEquals(true,$t->createParam('param1')->add());
        $this->assertEquals(true,$t->getParameter('param1')->isValid());
        $this->assertEquals(false,$t->createParam('param1')->add());
        $this->assertEquals(false,$t->getParameter('helloworld')->isValid());
        $this->assertEquals(true,$t->createParam('multi1','flag',['alpha','beta'])->add());
        $this->assertEquals(false,$t->createParam('alpha','flag',['a','b'])->add());
        $this->assertEquals(false,$t->createParam('gamma','flag',['alpha'])->add());
        $this->assertEquals(false,$t->createParam('delta','flag',['alpha'])->add());
    }

    public function testInputV2()
    {
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'hello world'];         // we use this line to simulate the user input
        $p = $t->createParam('test1')->setDescription('it is a test', 'test #1')->setInput()->evalParam(true);
        $this->assertEquals('hello world', $p->value);
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'hello world'];         // we use this line to simulate the user input
        $p = $t->createParam('test1')->setDescription('it is a test', 'test #2')->setInput()->evalParam(true);
        $this->assertEquals('hello world', $p->value);
    }
    public function testEscape()
    {
        $cli = new CliOne('CliOneTest.php');
        $txt="<red><bold>hello</bold></red>";
        $this->assertEquals("\e[31m\e[01mhello\e[22m\e[39m",$cli->colorText($txt));
        $this->assertEquals("hello",$cli->colorLess($cli->colorText($txt)));
        $this->assertEquals(str_repeat(chr(250),10)."hello".str_repeat(chr(250),10),$cli->colorMask($cli->colorText($txt)));
    }
    public function testVisual()
    {
        global $argv;
        $argv = ['program.php',];
        $cli = new CliOne('CliOneTest.php');
        $cli->showFrame(['line1', 'line2', 'line3'], ['title1', 'title2']);
        $this->assertEquals(["","a",""],$cli->alignLinesMiddle(["a"],3));
        $this->assertEquals(["","a","",""],$cli->alignLinesMiddle(["a"],4));
        $cli->showMessageBox(['line1', 'line2'], ['title1', 'title2']);
        $cli->showMessageBox(["one","two","three"],["title"]);
        $cli->showMessageBox(["content"],["one","two","three"]);
        $values = [];
        $values[] = ['col1' => 'value1', 'col2' => 'value2', 'col3' => 'value2'];
        $values[] = ['col1' => 'value12222222222222', 'col2' => 'value2', 'col3' => 'value2'];
        $values[] = ['col1' => 'value1', 'col2' => 'value2', 'col3' => 3232];
        $values[] = ['col1' => 'value1', 'col2' => 'value2', 'col3' => '544554'];
        $cli->showTable($values);
        $cli->setStyle('mysql')->showTable($values);
        $cli->setStyle('double')->showTable($values);
        $cli->setStyle('minimal')->showTable($values);
        $cli->setStyle('minimal')->showValuesColumn($values, 'option3');
        for ($i = 0; $i <= 100; $i += 20) {
            $cli->setStyle()->showProgressBar($i, 100, 40, " $i%");
        }
        $this->assertTrue(true);
    }

    public function testInputOptionDefaultError()
    {
        $values = ['k1' => 'v1', 'k2' => 'v2', 'k3' => 'v3'];
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'X', 'k1'];         // we use this line to simulate the user input
        $t->createParam('test1')
            ->setDescription('it is a test')
            ->setAllowEmpty()
            ->setInput(true, 'option', $values)->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals('v1', $p->value);
        $this->assertEquals('v1', $t->getValue('test1'));
        $this->assertEquals('k1', $t->getValueKey('test1'));
    }
    public function testisParamPresent() {
        global $argv;
        $argv = ['program.php','-flag1','--flag3','--flag4','value','-f6','value2'];
        $t = new CliOne('CliOneTest.php');
        $t->createParam('flag1')->add();
        $t->createParam('flag2')->add();
        $t->createParam('flag3','longflag')->add();
        $t->createParam('flag4','longflag')->add();
        $t->createParam('flag6','longflag','f6')->add();
        $t->createParam('flag7','longflag','f7')->add();
        $this->assertEquals('empty',$t->isParameterPresent('flag1'));
        $this->assertEquals('none',$t->isParameterPresent('flag2'));
        $this->assertEquals('empty',$t->isParameterPresent('flag3'));
        $this->assertEquals('value',$t->isParameterPresent('flag4'));
        $this->assertEquals('none',$t->isParameterPresent('flag5'));
        $this->assertEquals('value',$t->isParameterPresent('flag6'));
        $this->assertEquals('none',$t->isParameterPresent('flag7'));
    }

    public function testInputOption()
    {
        $values = ['op1aaaaaaaa', 'op2', 'op3', 'op4', 'op5', 'op6', 'op7'];
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'X', '3'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')->setInput(true, 'option', $values)->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals('op3', $p->value);
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'X', '10', '', '3'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')->setInput(true, 'option', $values)->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals('op3', $p->value);
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'X', '10', '', '3'];         // we use this line to simulate the user input
        $t->createParam('test1')
            ->setDescription('it is a test')
            ->setDefault('')
            ->setAllowEmpty()
            ->setInput(true, 'option', $values)
            ->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals('', $p->value);
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'X', '3'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')->setInput(true, 'option2', $values)->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals('op3', $p->value);
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'X', '3'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')->setInput(true, 'option3', $values)->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals('op3', $p->value);
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'X', '3'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')->setInput(true, 'option4', $values)->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals('op3', $p->value);
    }

    public function testInputEmpty()
    {
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];         // we use this line to simulate the user input
        $t->createParam('test1')
            ->setAllowEmpty()
            ->setDescription('it is a test')
            ->setInput()->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals('', $p->value);
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, '', 'hello']; // we use this line to simulate the user input
        //, the first value is the current value to read
        //, and the next values are the emulated user input
        $t->createParam('test1')
            ->setAllowEmpty(false)
            ->setDescription('it is a test')
            ->setInput()->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals('hello', $p->value);
    }

    public function testInputOptions()
    {
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setDefault(['op1', 'op2'])
            ->setInput(true, 'multiple', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals(['op1', 'op2'], $p->value);
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'a', 'op3', 'op2', 'op2', ''];   // all, remove3, remove2,add2, end
        $t->getParameter('test1')->setDefault([])
            ->setInput(true, 'multiple2', ['op1' => 'op1', 'op2' => 'op2', 'op3' => 'op3']);
        $p = $t->evalParam('test1', true);
        $this->assertEquals(['op1', 'op2'], $p->value);
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'a', 'n', 'x', ''];   // all, remove all, error,end
        $t->getParameter('test1')->setDefault([])
            ->setInput(true, 'multiple3', ['op1' => 'op1', 'op2' => 'op2', 'op3' => 'op3']);
        $p = $t->evalParam('test1', true);
        $this->assertEquals([], $p->value);
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setDefault(['op1', 'op2'])
            ->setInput(true, 'multiple', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals(['op1', 'op2'], $p->value);
    }

    public function testTemplate()
    {
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setDefault(['op1', 'op2'])
            ->setPattern('**<c>[{key}]</c>** {value} def:{def} desc{desc}')
            ->setInput(true, 'multiple', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals(['op1', 'op2'], $p->value);
    }

    public function testInputOptionShort()
    {
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        // select "a"ll, de-select 1, end
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, '', 'o', 'op1'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setInput(true, 'optionshort', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals('op1', $p->value);
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, '', 'y'];         // we use this line to simulate the user input
        $t->createParam('test1s')->setDescription('it is a test')
            ->setInput(true, 'optionshort', ['yes', 'no'])->add();
        $t->showparams();
        $p = $t->evalParam('test1s', true);
        $this->assertEquals('yes', $p->value);
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        // select "a"ll, de-select 1, end
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setDefault('op1')
            ->setAllowEmpty(false)
            ->setInput(true, 'optionshort', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals('op1', $p->value);
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        // select "a"ll, de-select 1, end
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setDefault('op1')
            ->setAllowEmpty() // even when it allows empty, it uses the default value.
            ->setInput(true, 'optionshort', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals('op1', $p->value);
    }

    public function testInputOptions2()
    {
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        // select "a"ll, de-select 1, end
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'a', 1, ''];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setInput(true, 'multiple', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals(['op2', 'op3'], $p->value);
    }

    public function testInputRage()
    {
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 33];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setInput(true, 'range', [0, 100])->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals(33, $p->value);
    }

    public function testInputNumber()
    {
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 33];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setInput(true, 'number')->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals(33, $t->getParameter('test1')->value);
        $this->assertEquals(33, $p->value);
    }

    public function testOthers()
    {
        global $argv;
        $argv = ['program.php',];
        $t = new CliOne('CliOneTest.php');
        $this->assertEquals(false, $t->isCli());
    }
}
