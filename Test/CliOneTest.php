<?php /** @noinspection ReturnTypeCanBeDeclaredInspection */

/** @noinspection DuplicatedCode */

namespace Eftec\CliOne;

use PHPUnit\Framework\TestCase;

class CliOneTest extends TestCase
{

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, "input"];  // we use this line to simulate the user input
        //, the first value is the current value to read
        //, and the next values are the emulated user input
    }

    public function testEvalParam()
    {
        global $argv;

        unset($GLOBALS['PHPUNIT_FAKE_READLINE']);

        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1')->add();
        $t->createParam('test2')->add();
        $argv = ['-test1', 'hello', '-test2', 'world'];
        $p = $t->evalParam('test2');
        $this->assertEquals('world', $p->value);

        // test 2.
        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1')->add();
        $t->createParam('test2')->add();
        $argv = ['-test1', 'hello', '-test2', 'world'];
        $p = $t->evalParam();
        $this->assertEquals('hello', $p->value);

        // test 3
        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1')->setDefault('not found')->add();
        $argv = [];
        $p = $t->evalParam('test1');
        $this->assertEquals('not found', $p->value);

        // test 4
        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1')->setRequired()->add();
        $argv = [];
        $p = $t->evalParam('test1');
        $this->assertEquals(false, $p->value);

        // test 5
        $t = new CliOne('CliOneTest.php');
        $t->createParam('test1')->setRequired()->add();
        $t->setParam('test1', 'hello world');
        $argv = [];
        $p = $t->evalParam('test1');
        $this->assertEquals('hello world', $p->value);
    }

    public function testInput()
    {
        global $argv;
        $argv = [];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'hello world'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')->setInput()->add();
        $p = $t->evalParam('test1');
        $this->assertEquals('hello world', $p->value);
    }

    public function testInputV2()
    {
        global $argv;
        $argv = [];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'hello world'];         // we use this line to simulate the user input
        $p = $t->createParam('test1')->setDescription('it is a test', 'test #1')->setInput()->evalParam(true);
        $this->assertEquals('hello world', $p->value);
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'hello world'];         // we use this line to simulate the user input
        $p = $t->createParam('test1')->setDescription('it is a test', 'test #2')->setInput()->evalParam(true);
        $this->assertEquals('hello world', $p->value);
    }

    public function testInputOption()
    {
        global $argv;
        $argv = [];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'X', '3'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')->setInput(true, 'option', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals('op3', $p->value);

        $argv = [];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'X', '10', '', '3'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')->setInput(true, 'option', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals('op3', $p->value);

        $argv = [];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'X', '10', '', '3'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')->setAllowEmpty()->setInput(true, 'option', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals('', $p->value);
    }

    public function testInputEmpty()
    {
        global $argv;
        $argv = [];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];         // we use this line to simulate the user input
        $t->createParam('test1')
            ->setAllowEmpty()
            ->setDescription('it is a test')
            ->setInput()->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals('', $p->value);

        $argv = [];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, '', 'hello']; // we use this line to simulate the user input
        //, the first value is the current value to read
        //, and the next values are the emulated user input
        $t->createParam('test1')
            ->setAllowEmpty(false)
            ->setDescription('it is a test')
            ->setInput()->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals('hello', $p->value);

    }

    public function testInputOptions()
    {
        global $argv;
        $argv = [];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setDefault(['op1', 'op2'])
            ->setInput(true, 'options', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals(['op1', 'op2'], $p->value);

        $argv = [];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setDefault(['op1', 'op2'])
            ->setInput(true, 'options', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals(['op1', 'op2'], $p->value);
    }
    public function testInputOptionShort()
    {
        global $argv;
        $argv = [];
        $t = new CliOne('CliOneTest.php');
        // select "a"ll, de-select 1, end
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, '','op1'];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setInput(true, 'optionshort', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals('op1', $p->value);

        $argv = [];
        $t = new CliOne('CliOneTest.php');
        // select "a"ll, de-select 1, end
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setDefault('op1')
            ->setAllowEmpty(false)
            ->setInput(true, 'optionshort', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals('op1', $p->value);

        $argv = [];
        $t = new CliOne('CliOneTest.php');
        // select "a"ll, de-select 1, end
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, ''];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setDefault('op1')
            ->setAllowEmpty()
            ->setInput(true, 'optionshort', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals('', $p->value);
    }

    public function testInputOptions2()
    {
        global $argv;
        $argv = [];
        $t = new CliOne('CliOneTest.php');
        // select "a"ll, de-select 1, end
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 'a', 1, ''];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setInput(true, 'options', ['op1', 'op2', 'op3'])->add();
        $t->showparams();
        $p = $t->evalParam('test1', true);
        $this->assertEquals(['op2', 'op3'], $p->value);
    }

    public function testInputRage()
    {
        global $argv;
        $argv = [];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 33];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setInput(true, 'range', [0, 100])->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals(33, $p->value);
    }

    public function testInputNumber()
    {
        global $argv;
        $argv = [];
        $t = new CliOne('CliOneTest.php');
        $GLOBALS['PHPUNIT_FAKE_READLINE'] = [0, 33];         // we use this line to simulate the user input
        $t->createParam('test1')->setDescription('it is a test')
            ->setInput(true, 'number')->add();
        $t->showparams();
        $p = $t->evalParam('test1');
        $this->assertEquals(33, $t->getParameter('test1')->value);
        $this->assertEquals(33, $p->value);
    }

    public function testOthers()
    {
        global $argv;
        $argv = [];
        $t = new CliOne('CliOneTest.php');
        $this->assertEquals(false, $t->isCli());
    }
}
